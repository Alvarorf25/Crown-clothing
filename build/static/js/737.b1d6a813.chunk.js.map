{"version":3,"file":"static/js/737.b1d6a813.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.tsx","components/form-input/form-input.styles.tsx","components/form-input/form-input.component.tsx","components/sign-in-form/sign-in-form.styles.tsx","components/sign-in-form/sign-in-form.component.tsx","components/sign-up-form/sign-up-form.styles.tsx","components/sign-up-form/sign-up-form.component.tsx","routes/authentication/authentication.styles.tsx","routes/authentication/authentication.component.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import { ButtonHTMLAttributes } from 'react';\n\nimport {BaseButton, GoogleSignInButton, InvertedButton, ButtonSpinner} from './button.styles';\n\nexport enum BUTTON_TYPE_CLASSES {\n    base = 'base',\n    google = 'google-sign-in',\n    inverted = 'inverted'\n};\n\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base): typeof BaseButton => (\n    {\n        [BUTTON_TYPE_CLASSES.base]: BaseButton,\n        [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\n        [BUTTON_TYPE_CLASSES.inverted]: InvertedButton\n    }[buttonType]\n);\n\nexport type ButtonProps = {    \n    buttonType?: BUTTON_TYPE_CLASSES;\n    isLoading?: boolean;\n} & ButtonHTMLAttributes<HTMLButtonElement>\n\nconst Button = ({ children, buttonType, isLoading, ...otherProps }: ButtonProps) => {\n    const CustomButton = getButton(buttonType);\n\n    return (\n        <CustomButton disabled={isLoading} {...otherProps}>\n            {isLoading ? <ButtonSpinner/> : children}\n        </CustomButton>\n    );    \n};\n\nexport default Button;","import styled from 'styled-components';\n\nimport { SpinnerContainer } from '../spinner/spinner.styles';\n\nexport const BaseButton = styled.button`\n  min-width: 165px;\n  width: auto;\n  height: 50px;\n  letter-spacing: 0.5px;\n  line-height: 50px;\n  padding: 0 35px 0 35px;\n  font-size: 15px;\n  background-color: black;\n  color: white;\n  text-transform: uppercase;\n  font-family: 'Oswald';\n  font-weight: bolder;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    background-color: white;\n    color: black;\n    border: 1px solid black;\n  }  \n`;\n\nexport const GoogleSignInButton = styled(BaseButton)`\n  background-color: #4285f4;\n  color: white;\n\n  &:hover {\n    background-color: #357ae8;\n    border: none;\n  }  \n`;\n\nexport const InvertedButton = styled(BaseButton)`\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n\n  &:hover {\n    background-color: black;\n    color: white;\n    border: none;\n  } \n`;\n\nexport const ButtonSpinner = styled(SpinnerContainer)`\n  width: 30px;\n  height: 30px\n`;","import styled, { css } from 'styled-components';\n\nconst subColor = 'grey';\nconst mainColor = 'black';\n\nconst shrinkLabelStyles = css`\n  top: -14px;\n  font-size: 12px;\n  color: ${mainColor};  \n`;\n\ntype FormInputLabelProps = {\n  shrink?: boolean;\n}\n\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\n  color: ${subColor};\n  font-size: 16px;\n  font-weight: normal;\n  position: absolute;\n  pointer-events: none;\n  left: 5px;\n  top: 10px;\n  transition: 300ms ease all;\n\n  ${({shrink}) => shrink && shrinkLabelStyles}\n`;\n\nexport const Input = styled.input`\n  background: none;\n  background-color: white;\n  color: ${subColor};\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  display: block;\n  width: 100%;\n  border: none;\n  border-radius: 0;\n  border-bottom: 1px solid ${subColor};\n  margin: 25px 0;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:focus ~ ${FormInputLabel} {\n    ${shrinkLabelStyles}\n  }\n`;\n\nexport const Group = styled.div`\n  position: relative;\n  margin: 45px 0;\n\n  input[type='password'] {\n    letter-spacing: 0.3em;\n  }  \n`;","import { InputHTMLAttributes, FC } from 'react';\n\nimport {FormInputLabel, Input, Group} from './form-input.styles';\n\ntype FormInputProps = { label: string } & InputHTMLAttributes<HTMLInputElement>;\n\nconst FormInput: FC<FormInputProps>  = ({ label, ...otherProps }) => {    \n    return (\n        <Group>\n            <Input {...otherProps} />\n            {\n                label && (\n                    <FormInputLabel \n                        shrink={Boolean(otherProps.value && typeof otherProps.value === 'string' && otherProps.value.length)}\n                    >\n                        {label}\n                    </FormInputLabel>\n                )\n            }\n        </Group>\n    )\n};\n\nexport default FormInput;","import styled from 'styled-components';\n\nexport const SignUpContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 380px;\n\n    h2 {\n        margin: 10px 0;\n    }    \n`;\n\nexport const ButtonContainer = styled.div`\n    display: flex;\n    justify-content: space-between;    \n`;","import { useState, FormEvent, ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport FormInput from '../form-input/form-input.component';\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\n\nimport {SignUpContainer, ButtonContainer} from './sign-in-form.styles';\n\nimport { googleSignInStart, emailSignInStart } from '../../store/user/user.action'\n\nconst defaultFormFields = {    \n    email: '',\n    password: ''    \n};\n\nconst SignInForm = () => {\n    const dispatch = useDispatch();\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const { email, password } = formFields;\n\n    const resetFormFields = () => {\n        setFormFields(defaultFormFields);\n    };\n\n    const signInWithGoogle = () => {\n        dispatch(googleSignInStart());        \n    };\n\n    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();         \n        \n        try {\n            dispatch(emailSignInStart(email, password));          \n            resetFormFields();\n            \n        } catch (error) {\n            console.log('user sign in failed', error)\n        }\n    };\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        setFormFields({...formFields, [name]: value});        \n    }\n\n    return (\n        <SignUpContainer>\n            <h2>Already have an account?</h2>\n            <span>Sign in with your email and password</span>\n            <form onSubmit={handleSubmit}>                \n                <FormInput \n                    label=\"Email\"                    \n                    type='email' \n                    required\n                    onChange={handleChange}\n                    name='email' \n                    value={email}                    \n                />\n                \n                <FormInput \n                    label=\"Password\"                    \n                    type='password' \n                    required \n                    onChange={handleChange} \n                    name='password' \n                    value={password}                    \n                />\n\n                <ButtonContainer>\n                    <Button type='submit'>Sign In</Button>\n                    <Button type='button' buttonType={BUTTON_TYPE_CLASSES.google} onClick={signInWithGoogle}>Google sign in</Button>\n                </ButtonContainer>               \n            </form>\n        </SignUpContainer>\n    );\n};\n\nexport default SignInForm;","import styled from 'styled-components';\n\nexport const SignUpContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 380px;\n\n    h2 {\n        margin: 10px 0;\n    }    \n`;","import { useState, FormEvent, ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AuthError, AuthErrorCodes } from 'firebase/auth';\n\nimport FormInput from '../form-input/form-input.component';\nimport Button from '../button/button.component';\n\nimport { signUpStart } from '../../store/user/user.action';\n\nimport {SignUpContainer} from './sign-up-form.styles';\n\nconst defaultFormFields = {\n    displayName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n};\n\nconst SignUpForm = () => {\n    const dispatch = useDispatch();\n    const [formFields, setFormFields] = useState(defaultFormFields);\n    const { displayName, email, password, confirmPassword } = formFields;\n    \n    const resetFormFields = () => {\n        setFormFields(defaultFormFields);\n    };\n\n    const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (password !== confirmPassword) {\n            alert(\"passwords do not match\");\n            return;\n        }\n\n        try {\n            dispatch(signUpStart(email, password, displayName));            \n            resetFormFields();\n            \n        } catch (error) {\n            if ((error as AuthError).code === AuthErrorCodes.EMAIL_EXISTS) {\n                alert('Cannot create user, email already in use');\n            } else {\n                console.log(\"user creation encountered an error\", error);\n            }\n        }\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const { name, value } = event.target;\n        setFormFields({...formFields, [name]: value});        \n    };\n\n    return (\n        <SignUpContainer>\n            <h2>Don't have an account?</h2>\n            <span>Sign up with your email and password</span>\n            <form onSubmit={handleSubmit}>\n                \n                <FormInput \n                    label=\"Display Name\"                    \n                    type='text' \n                    required \n                    onChange={handleChange} \n                    name='displayName' \n                    value={displayName}                    \n                />\n                \n                <FormInput \n                    label=\"Email\"                    \n                    type='email' \n                    required\n                    onChange={handleChange}\n                    name='email' \n                    value={email}                    \n                />\n                \n                <FormInput \n                    label=\"Password\"                    \n                    type='password' \n                    required \n                    onChange={handleChange} \n                    name='password' \n                    value={password}                    \n                />\n\n                <FormInput \n                    label=\"Confirm Password\"                    \n                    type='password'\n                    required \n                    onChange={handleChange}\n                    name='confirmPassword' \n                    value={confirmPassword}\n                   \n                />                \n                \n                <Button type='submit'>Sign Up</Button>                \n            </form>\n        </SignUpContainer>\n    )\n};\n\nexport default SignUpForm;","import styled from 'styled-components';\n\nexport const AuthenticationContainer = styled.div`\n    display: flex;\n    width: 900px;\n    justify-content: space-between;\n    margin: 30px auto;    \n`;","import SignInForm from \"../../components/sign-in-form/sign-in-form.component\";\nimport SignUpForm from \"../../components/sign-up-form/sign-up-form.component\";\n\nimport {AuthenticationContainer} from './authentication.styles';\n\nconst Authentication = () => {\n    return (\n        <AuthenticationContainer>            \n            <SignInForm />\n            <SignUpForm />\n        </AuthenticationContainer>\n    );\n};\n\nexport default Authentication;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["BUTTON_TYPE_CLASSES","children","buttonType","isLoading","otherProps","CustomButton","base","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","disabled","styled","ButtonSpinner","SpinnerContainer","subColor","shrinkLabelStyles","css","FormInputLabel","shrink","Input","Group","label","Boolean","value","length","SignUpContainer","ButtonContainer","defaultFormFields","email","password","dispatch","useDispatch","useState","formFields","setFormFields","handleSubmit","event","preventDefault","emailSignInStart","error","console","log","handleChange","target","name","onSubmit","type","required","onChange","onClick","googleSignInStart","displayName","confirmPassword","alert","signUpStart","code","AuthErrorCodes","AuthenticationContainer","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}